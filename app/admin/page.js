'use client';

import { useState, useEffect } from 'react';
import './admin.css';

export default function AdminPage() {
    // State management
    const [activeTab, setActiveTab] = useState('system');
    const [systemStatus, setSystemStatus] = useState(true);
    
    // Teachers state
    const [teachers, setTeachers] = useState([
        { id: 1, name: 'р╕нр╕▓р╕Ир╕▓р╕гр╕вр╣Мр╕кр╕бр╕Кр╕▓р╕в', email: 'somchai@school.com', subject: 'р╕Др╕Ур╕┤р╕Хр╕ир╕▓р╕кр╕Хр╕гр╣М' },
        { id: 2, name: 'р╕нр╕▓р╕Ир╕▓р╕гр╕вр╣Мр╕кр╕бр╕лр╕Нр╕┤р╕З', email: 'somying@school.com', subject: 'р╕ар╕▓р╕йр╕▓р╣Др╕Чр╕в' },
    ]);
    const [teacherForm, setTeacherForm] = useState({ name: '', email: '', subject: '' });
    const [editingTeacher, setEditingTeacher] = useState(null);

    // Students state
    const [students, setStudents] = useState([
        { id: 1, name: 'р╕Щр╕▓р╕вр╕кр╕бр╕ир╕▒р╕Бр╕Фр╕┤р╣М', studentId: 'S001', class: 'р╕б.1/1', email: 'somsak@student.com' },
        { id: 2, name: 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕бр╕▓р╕ер╕╡', studentId: 'S002', class: 'р╕б.1/2', email: 'malee@student.com' },
    ]);
    const [studentForm, setStudentForm] = useState({ name: '', studentId: '', class: '', email: '' });
    const [editingStudent, setEditingStudent] = useState(null);

    // Rooms state
    const [rooms, setRooms] = useState([
        { id: 1, name: 'р╕лр╣Йр╕нр╕З 101', capacity: 30, floor: 1 },
        { id: 2, name: 'р╕лр╣Йр╕нр╕З 102', capacity: 25, floor: 1 },
        { id: 3, name: 'р╕лр╣Йр╕нр╕З 201', capacity: 35, floor: 2 },
    ]);
    const [roomForm, setRoomForm] = useState({ name: '', capacity: '', floor: '' });
    const [editingRoom, setEditingRoom] = useState(null);

    // Years state
    const [years, setYears] = useState([
        { id: 1, name: 'р╕Ыр╕╡р╕Бр╕▓р╕гр╕ир╕╢р╕Бр╕йр╕▓ 2567', level: 'р╕бр╕▒р╕Шр╕вр╕бр╕ир╕╢р╕Бр╕йр╕▓р╕Ыр╕╡р╕Чр╕╡р╣И 1', active: true },
        { id: 2, name: 'р╕Ыр╕╡р╕Бр╕▓р╕гр╕ир╕╢р╕Бр╕йр╕▓ 2568', level: 'р╕бр╕▒р╕Шр╕вр╕бр╕ир╕╢р╕Бр╕йр╕▓р╕Ыр╕╡р╕Чр╕╡р╣И 2', active: false },
    ]);
    const [yearForm, setYearForm] = useState({ name: '', level: '', active: false });
    const [editingYear, setEditingYear] = useState(null);

    // System control functions
    const toggleSystem = () => {
        setSystemStatus(!systemStatus);
        showSuccessMessage(`р╕гр╕░р╕Ър╕Ъ${!systemStatus ? 'р╣Ар╕Ыр╕┤р╕Ф' : 'р╕Ыр╕┤р╕Ф'}р╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╣Бр╕ер╣Йр╕з`);
    };

    // Teacher CRUD operations
    const handleTeacherSubmit = (e) => {
        e.preventDefault();
        try {
            if (editingTeacher) {
                const updatedTeachers = teachers.map(t => 
                    t.id === editingTeacher.id ? { ...editingTeacher, ...teacherForm } : t
                );
                setTeachers(updatedTeachers);
                setEditingTeacher(null);
                showSuccessMessage('р╕нр╕▒р╕Юр╣Ар╕Фр╕Чр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Др╕гр╕╣р╕кр╕│р╣Ар╕гр╣Зр╕И');
            } else {
                const newTeacher = { id: Date.now(), ...teacherForm };
                setTeachers([...teachers, newTeacher]);
                showSuccessMessage('р╣Ар╕Юр╕┤р╣Ир╕бр╕Др╕гр╕╣р╣Гр╕лр╕бр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И');
            }
            setTeacherForm({ name: '', email: '', subject: '' });
        } catch (error) {
            console.error('Error saving teacher:', error);
            showErrorMessage('р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Др╕гр╕╣');
        }
    };

    const editTeacher = (teacher) => {
        setEditingTeacher(teacher);
        setTeacherForm({ name: teacher.name, email: teacher.email, subject: teacher.subject });
    };

    const deleteTeacher = (id) => {
        if (confirm('р╕Др╕╕р╕Ур╣Бр╕Щр╣Ир╣Гр╕Ир╕лр╕гр╕╖р╕нр╣Др╕бр╣Ир╕Чр╕╡р╣Ир╕Ир╕░р╕ер╕Ър╕Др╕гр╕╣р╕Чр╣Ир╕▓р╕Щр╕Щр╕╡р╣Й?')) {
            setTeachers(teachers.filter(t => t.id !== id));
            showSuccessMessage('р╕ер╕Ър╕Др╕гр╕╣р╕кр╕│р╣Ар╕гр╣Зр╕И');
        }
    };

    // Student CRUD operations
    const handleStudentSubmit = (e) => {
        e.preventDefault();
        try {
            if (editingStudent) {
                const updatedStudents = students.map(s => 
                    s.id === editingStudent.id ? { ...editingStudent, ...studentForm } : s
                );
                setStudents(updatedStudents);
                setEditingStudent(null);
                showSuccessMessage('р╕нр╕▒р╕Юр╣Ар╕Фр╕Чр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Щр╕▒р╕Бр╣Ар╕гр╕╡р╕вр╕Щр╕кр╕│р╣Ар╕гр╣Зр╕И');
            } else {
                const newStudent = { id: Date.now(), ...studentForm };
                setStudents([...students, newStudent]);
                showSuccessMessage('р╣Ар╕Юр╕┤р╣Ир╕бр╕Щр╕▒р╕Бр╣Ар╕гр╕╡р╕вр╕Щр╣Гр╕лр╕бр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И');
            }
            setStudentForm({ name: '', studentId: '', class: '', email: '' });
        } catch (error) {
            console.error('Error saving student:', error);
            showErrorMessage('р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Щр╕▒р╕Бр╣Ар╕гр╕╡р╕вр╕Щ');
        }
    };

    const editStudent = (student) => {
        setEditingStudent(student);
        setStudentForm({ name: student.name, studentId: student.studentId, class: student.class, email: student.email });
    };

    const deleteStudent = (id) => {
        if (confirm('р╕Др╕╕р╕Ур╣Бр╕Щр╣Ир╣Гр╕Ир╕лр╕гр╕╖р╕нр╣Др╕бр╣Ир╕Чр╕╡р╣Ир╕Ир╕░р╕ер╕Ър╕Щр╕▒р╕Бр╣Ар╕гр╕╡р╕вр╕Щр╕Др╕Щр╕Щр╕╡р╣Й?')) {
            setStudents(students.filter(s => s.id !== id));
            showSuccessMessage('р╕ер╕Ър╕Щр╕▒р╕Бр╣Ар╕гр╕╡р╕вр╕Щр╕кр╕│р╣Ар╕гр╣Зр╕И');
        }
    };

    // Room CRUD operations
    const handleRoomSubmit = (e) => {
        e.preventDefault();
        try {
            if (editingRoom) {
                const updatedRooms = rooms.map(r => 
                    r.id === editingRoom.id ? { ...editingRoom, ...roomForm } : r
                );
                setRooms(updatedRooms);
                setEditingRoom(null);
                showSuccessMessage('р╕нр╕▒р╕Юр╣Ар╕Фр╕Чр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕лр╣Йр╕нр╕Зр╕кр╕│р╣Ар╕гр╣Зр╕И');
            } else {
                const newRoom = { id: Date.now(), ...roomForm };
                setRooms([...rooms, newRoom]);
                showSuccessMessage('р╣Ар╕Юр╕┤р╣Ир╕бр╕лр╣Йр╕нр╕Зр╣Гр╕лр╕бр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И');
            }
            setRoomForm({ name: '', capacity: '', floor: '' });
        } catch (error) {
            console.error('Error saving room:', error);
            showErrorMessage('р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕лр╣Йр╕нр╕З');
        }
    };

    const editRoom = (room) => {
        setEditingRoom(room);
        setRoomForm({ name: room.name, capacity: room.capacity, floor: room.floor });
    };

    const deleteRoom = (id) => {
        if (confirm('р╕Др╕╕р╕Ур╣Бр╕Щр╣Ир╣Гр╕Ир╕лр╕гр╕╖р╕нр╣Др╕бр╣Ир╕Чр╕╡р╣Ир╕Ир╕░р╕ер╕Ър╕лр╣Йр╕нр╕Зр╕Щр╕╡р╣Й?')) {
            setRooms(rooms.filter(r => r.id !== id));
            showSuccessMessage('р╕ер╕Ър╕лр╣Йр╕нр╕Зр╕кр╕│р╣Ар╕гр╣Зр╕И');
        }
    };

    // Year CRUD operations
    const handleYearSubmit = (e) => {
        e.preventDefault();
        try {
            if (editingYear) {
                const updatedYears = years.map(y => 
                    y.id === editingYear.id ? { ...editingYear, ...yearForm } : y
                );
                setYears(updatedYears);
                setEditingYear(null);
                showSuccessMessage('р╕нр╕▒р╕Юр╣Ар╕Фр╕Чр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ыр╕╡р╕Бр╕▓р╕гр╕ир╕╢р╕Бр╕йр╕▓р╕кр╕│р╣Ар╕гр╣Зр╕И');
            } else {
                const newYear = { id: Date.now(), ...yearForm };
                setYears([...years, newYear]);
                showSuccessMessage('р╣Ар╕Юр╕┤р╣Ир╕бр╕Ыр╕╡р╕Бр╕▓р╕гр╕ир╕╢р╕Бр╕йр╕▓р╣Гр╕лр╕бр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И');
            }
            setYearForm({ name: '', level: '', active: false });
        } catch (error) {
            console.error('Error saving year:', error);
            showErrorMessage('р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ыр╕╡р╕Бр╕▓р╕гр╕ир╕╢р╕Бр╕йр╕▓');
        }
    };

    const editYear = (year) => {
        setEditingYear(year);
        setYearForm({ name: year.name, level: year.level, active: year.active });
    };

    const deleteYear = (id) => {
        if (confirm('р╕Др╕╕р╕Ур╣Бр╕Щр╣Ир╣Гр╕Ир╕лр╕гр╕╖р╕нр╣Др╕бр╣Ир╕Чр╕╡р╣Ир╕Ир╕░р╕ер╕Ър╕Ыр╕╡р╕Бр╕▓р╕гр╕ир╕╢р╕Бр╕йр╕▓р╕Щр╕╡р╣Й?')) {
            setYears(years.filter(y => y.id !== id));
            showSuccessMessage('р╕ер╕Ър╕Ыр╕╡р╕Бр╕▓р╕гр╕ир╕╢р╕Бр╕йр╕▓р╕кр╕│р╣Ар╕гр╣Зр╕И');
        }
    };

    // Utility functions
    const showSuccessMessage = (message) => {
        alert(`тЬЕ ${message}`);
    };

    const showErrorMessage = (message) => {
        alert(`тЭМ ${message}`);
    };

    return (
        <div className="admin-container">
            <div className="admin-header">
                <h1>ЁЯОУ р╕гр╕░р╕Ър╕Ър╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╣Вр╕гр╕Зр╣Ар╕гр╕╡р╕вр╕Щ</h1>
                <p>р╕лр╕Щр╣Йр╕▓р╕Др╕зр╕Ър╕Др╕╕р╕бр╕гр╕░р╕Ър╕Ър╕кр╕│р╕лр╕гр╕▒р╕Ър╕Ьр╕╣р╣Йр╕Фр╕╣р╣Бр╕е</p>
            </div>

            {/* Navigation Tabs */}
            <nav className="admin-nav">
                <button 
                    className={`nav-btn ${activeTab === 'system' ? 'active' : ''}`}
                    onClick={() => setActiveTab('system')}
                >
                    ЁЯПа р╕Др╕зр╕Ър╕Др╕╕р╕бр╕гр╕░р╕Ър╕Ъ
                </button>
                <button 
                    className={`nav-btn ${activeTab === 'teachers' ? 'active' : ''}`}
                    onClick={() => setActiveTab('teachers')}
                >
                    ЁЯСитАНЁЯПл р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Др╕гр╕╣
                </button>
                <button 
                    className={`nav-btn ${activeTab === 'students' ? 'active' : ''}`}
                    onClick={() => setActiveTab('students')}
                >
                    ЁЯСитАНЁЯОУ р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Щр╕▒р╕Бр╣Ар╕гр╕╡р╕вр╕Щ
                </button>
                <button 
                    className={`nav-btn ${activeTab === 'rooms' ? 'active' : ''}`}
                    onClick={() => setActiveTab('rooms')}
                >
                    ЁЯПл р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕лр╣Йр╕нр╕Зр╣Ар╕гр╕╡р╕вр╕Щ
                </button>
                <button 
                    className={`nav-btn ${activeTab === 'years' ? 'active' : ''}`}
                    onClick={() => setActiveTab('years')}
                >
                    ЁЯУЕ р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Ыр╕╡р╕Бр╕▓р╕гр╕ир╕╢р╕Бр╕йр╕▓
                </button>
            </nav>

            <div className="admin-content">
                {/* System Control Tab */}
                {activeTab === 'system' && (
                    <div className="tab-content">
                        <h2>ЁЯПа р╕Др╕зр╕Ър╕Др╕╕р╕бр╕гр╕░р╕Ър╕Ъ</h2>
                        <div className="system-control">
                            <div className="system-status">
                                <h3>р╕кр╕Цр╕▓р╕Щр╕░р╕гр╕░р╕Ър╕Ъ</h3>
                                <div className={`status-indicator ${systemStatus ? 'online' : 'offline'}`}>
                                    <span className="status-dot"></span>
                                    <span className="status-text">
                                        р╕гр╕░р╕Ър╕Ъ{systemStatus ? 'р╣Ар╕Ыр╕┤р╕Ф' : 'р╕Ыр╕┤р╕Ф'}р╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ
                                    </span>
                                </div>
                                <button 
                                    className={`toggle-btn ${systemStatus ? 'turn-off' : 'turn-on'}`}
                                    onClick={toggleSystem}
                                >
                                    {systemStatus ? 'ЁЯФ┤ р╕Ыр╕┤р╕Фр╕гр╕░р╕Ър╕Ъ' : 'ЁЯЯв р╣Ар╕Ыр╕┤р╕Фр╕гр╕░р╕Ър╕Ъ'}
                                </button>
                            </div>
                            
                            <div className="system-stats">
                                <div className="stat-card">
                                    <h4>ЁЯСитАНЁЯПл р╕Ир╕│р╕Щр╕зр╕Щр╕Др╕гр╕╣</h4>
                                    <p className="stat-number">{teachers.length}</p>
                                </div>
                                <div className="stat-card">
                                    <h4>ЁЯСитАНЁЯОУ р╕Ир╕│р╕Щр╕зр╕Щр╕Щр╕▒р╕Бр╣Ар╕гр╕╡р╕вр╕Щ</h4>
                                    <p className="stat-number">{students.length}</p>
                                </div>
                                <div className="stat-card">
                                    <h4>ЁЯПл р╕Ир╕│р╕Щр╕зр╕Щр╕лр╣Йр╕нр╕Зр╣Ар╕гр╕╡р╕вр╕Щ</h4>
                                    <p className="stat-number">{rooms.length}</p>
                                </div>
                                <div className="stat-card">
                                    <h4>ЁЯУЕ р╕Ир╕│р╕Щр╕зр╕Щр╕Ыр╕╡р╕Бр╕▓р╕гр╕ир╕╢р╕Бр╕йр╕▓</h4>
                                    <p className="stat-number">{years.length}</p>
                                </div>
                            </div>
                        </div>
                    </div>
                )}

                {/* Teachers Management Tab */}
                {activeTab === 'teachers' && (
                    <div className="tab-content">
                        <h2>ЁЯСитАНЁЯПл р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Др╕гр╕╣</h2>
                        
                        {/* Teacher Form */}
                        <div className="form-section">
                            <h3>{editingTeacher ? 'р╣Бр╕Бр╣Йр╣Др╕Вр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Др╕гр╕╣' : 'р╣Ар╕Юр╕┤р╣Ир╕бр╕Др╕гр╕╣р╣Гр╕лр╕бр╣И'}</h3>
                            <form onSubmit={handleTeacherSubmit} className="admin-form">
                                <div className="form-row">
                                    <input
                                        type="text"
                                        placeholder="р╕Кр╕╖р╣Ир╕н-р╕Щр╕▓р╕бр╕кр╕Бр╕╕р╕е"
                                        value={teacherForm.name}
                                        onChange={(e) => setTeacherForm({...teacherForm, name: e.target.value})}
                                        required
                                    />
                                    <input
                                        type="email"
                                        placeholder="р╕нр╕╡р╣Ар╕бр╕е"
                                        value={teacherForm.email}
                                        onChange={(e) => setTeacherForm({...teacherForm, email: e.target.value})}
                                        required
                                    />
                                    <input
                                        type="text"
                                        placeholder="р╕зр╕┤р╕Кр╕▓р╕Чр╕╡р╣Ир╕кр╕нр╕Щ"
                                        value={teacherForm.subject}
                                        onChange={(e) => setTeacherForm({...teacherForm, subject: e.target.value})}
                                        required
                                    />
                                </div>
                                <div className="form-actions">
                                    <button type="submit" className="submit-btn">
                                        {editingTeacher ? 'ЁЯТ╛ р╕нр╕▒р╕Юр╣Ар╕Фр╕Ч' : 'тЮХ р╣Ар╕Юр╕┤р╣Ир╕бр╕Др╕гр╕╣'}
                                    </button>
                                    {editingTeacher && (
                                        <button 
                                            type="button" 
                                            className="cancel-btn"
                                            onClick={() => {
                                                setEditingTeacher(null);
                                                setTeacherForm({ name: '', email: '', subject: '' });
                                            }}
                                        >
                                            тЭМ р╕вр╕Бр╣Ар╕ер╕┤р╕Б
                                        </button>
                                    )}
                                </div>
                            </form>
                        </div>

                        {/* Teachers List */}
                        <div className="list-section">
                            <h3>р╕гр╕▓р╕вр╕Кр╕╖р╣Ир╕нр╕Др╕гр╕╣ ({teachers.length} р╕Др╕Щ)</h3>
                            <div className="data-table">
                                <table>
                                    <thead>
                                        <tr>
                                            <th>р╕Кр╕╖р╣Ир╕н-р╕Щр╕▓р╕бр╕кр╕Бр╕╕р╕е</th>
                                            <th>р╕нр╕╡р╣Ар╕бр╕е</th>
                                            <th>р╕зр╕┤р╕Кр╕▓р╕Чр╕╡р╣Ир╕кр╕нр╕Щ</th>
                                            <th>р╕Ир╕▒р╕Фр╕Бр╕▓р╕г</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {teachers.map(teacher => (
                                            <tr key={teacher.id}>
                                                <td>{teacher.name}</td>
                                                <td>{teacher.email}</td>
                                                <td>{teacher.subject}</td>
                                                <td>
                                                    <button 
                                                        className="edit-btn"
                                                        onClick={() => editTeacher(teacher)}
                                                    >
                                                        тЬПя╕П р╣Бр╕Бр╣Йр╣Др╕В
                                                    </button>
                                                    <button 
                                                        className="delete-btn"
                                                        onClick={() => deleteTeacher(teacher.id)}
                                                    >
                                                        ЁЯЧСя╕П р╕ер╕Ъ
                                                    </button>
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                )}

                {/* Students Management Tab */}
                {activeTab === 'students' && (
                    <div className="tab-content">
                        <h2>ЁЯСитАНЁЯОУ р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Щр╕▒р╕Бр╣Ар╕гр╕╡р╕вр╕Щ</h2>
                        
                        {/* Student Form */}
                        <div className="form-section">
                            <h3>{editingStudent ? 'р╣Бр╕Бр╣Йр╣Др╕Вр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Щр╕▒р╕Бр╣Ар╕гр╕╡р╕вр╕Щ' : 'р╣Ар╕Юр╕┤р╣Ир╕бр╕Щр╕▒р╕Бр╣Ар╕гр╕╡р╕вр╕Щр╣Гр╕лр╕бр╣И'}</h3>
                            <form onSubmit={handleStudentSubmit} className="admin-form">
                                <div className="form-row">
                                    <input
                                        type="text"
                                        placeholder="р╕Кр╕╖р╣Ир╕н-р╕Щр╕▓р╕бр╕кр╕Бр╕╕р╕е"
                                        value={studentForm.name}
                                        onChange={(e) => setStudentForm({...studentForm, name: e.target.value})}
                                        required
                                    />
                                    <input
                                        type="text"
                                        placeholder="р╕гр╕лр╕▒р╕кр╕Щр╕▒р╕Бр╣Ар╕гр╕╡р╕вр╕Щ"
                                        value={studentForm.studentId}
                                        onChange={(e) => setStudentForm({...studentForm, studentId: e.target.value})}
                                        required
                                    />
                                    <input
                                        type="text"
                                        placeholder="р╕Кр╕▒р╣Йр╕Щр╣Ар╕гр╕╡р╕вр╕Щ"
                                        value={studentForm.class}
                                        onChange={(e) => setStudentForm({...studentForm, class: e.target.value})}
                                        required
                                    />
                                    <input
                                        type="email"
                                        placeholder="р╕нр╕╡р╣Ар╕бр╕е"
                                        value={studentForm.email}
                                        onChange={(e) => setStudentForm({...studentForm, email: e.target.value})}
                                        required
                                    />
                                </div>
                                <div className="form-actions">
                                    <button type="submit" className="submit-btn">
                                        {editingStudent ? 'ЁЯТ╛ р╕нр╕▒р╕Юр╣Ар╕Фр╕Ч' : 'тЮХ р╣Ар╕Юр╕┤р╣Ир╕бр╕Щр╕▒р╕Бр╣Ар╕гр╕╡р╕вр╕Щ'}
                                    </button>
                                    {editingStudent && (
                                        <button 
                                            type="button" 
                                            className="cancel-btn"
                                            onClick={() => {
                                                setEditingStudent(null);
                                                setStudentForm({ name: '', studentId: '', class: '', email: '' });
                                            }}
                                        >
                                            тЭМ р╕вр╕Бр╣Ар╕ер╕┤р╕Б
                                        </button>
                                    )}
                                </div>
                            </form>
                        </div>

                        {/* Students List */}
                        <div className="list-section">
                            <h3>р╕гр╕▓р╕вр╕Кр╕╖р╣Ир╕нр╕Щр╕▒р╕Бр╣Ар╕гр╕╡р╕вр╕Щ ({students.length} р╕Др╕Щ)</h3>
                            <div className="data-table">
                                <table>
                                    <thead>
                                        <tr>
                                            <th>р╕Кр╕╖р╣Ир╕н-р╕Щр╕▓р╕бр╕кр╕Бр╕╕р╕е</th>
                                            <th>р╕гр╕лр╕▒р╕кр╕Щр╕▒р╕Бр╣Ар╕гр╕╡р╕вр╕Щ</th>
                                            <th>р╕Кр╕▒р╣Йр╕Щр╣Ар╕гр╕╡р╕вр╕Щ</th>
                                            <th>р╕нр╕╡р╣Ар╕бр╕е</th>
                                            <th>р╕Ир╕▒р╕Фр╕Бр╕▓р╕г</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {students.map(student => (
                                            <tr key={student.id}>
                                                <td>{student.name}</td>
                                                <td>{student.studentId}</td>
                                                <td>{student.class}</td>
                                                <td>{student.email}</td>
                                                <td>
                                                    <button 
                                                        className="edit-btn"
                                                        onClick={() => editStudent(student)}
                                                    >
                                                        тЬПя╕П р╣Бр╕Бр╣Йр╣Др╕В
                                                    </button>
                                                    <button 
                                                        className="delete-btn"
                                                        onClick={() => deleteStudent(student.id)}
                                                    >
                                                        ЁЯЧСя╕П р╕ер╕Ъ
                                                    </button>
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                )}

                {/* Rooms Management Tab */}
                {activeTab === 'rooms' && (
                    <div className="tab-content">
                        <h2>ЁЯПл р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕лр╣Йр╕нр╕Зр╣Ар╕гр╕╡р╕вр╕Щ</h2>
                        
                        {/* Room Form */}
                        <div className="form-section">
                            <h3>{editingRoom ? 'р╣Бр╕Бр╣Йр╣Др╕Вр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕лр╣Йр╕нр╕З' : 'р╣Ар╕Юр╕┤р╣Ир╕бр╕лр╣Йр╕нр╕Зр╣Гр╕лр╕бр╣И'}</h3>
                            <form onSubmit={handleRoomSubmit} className="admin-form">
                                <div className="form-row">
                                    <input
                                        type="text"
                                        placeholder="р╕Кр╕╖р╣Ир╕нр╕лр╣Йр╕нр╕З"
                                        value={roomForm.name}
                                        onChange={(e) => setRoomForm({...roomForm, name: e.target.value})}
                                        required
                                    />
                                    <input
                                        type="number"
                                        placeholder="р╕Др╕зр╕▓р╕бр╕Ир╕╕ (р╕Др╕Щ)"
                                        value={roomForm.capacity}
                                        onChange={(e) => setRoomForm({...roomForm, capacity: e.target.value})}
                                        required
                                        min="1"
                                    />
                                    <input
                                        type="number"
                                        placeholder="р╕Кр╕▒р╣Йр╕Щ"
                                        value={roomForm.floor}
                                        onChange={(e) => setRoomForm({...roomForm, floor: e.target.value})}
                                        required
                                        min="1"
                                    />
                                </div>
                                <div className="form-actions">
                                    <button type="submit" className="submit-btn">
                                        {editingRoom ? 'ЁЯТ╛ р╕нр╕▒р╕Юр╣Ар╕Фр╕Ч' : 'тЮХ р╣Ар╕Юр╕┤р╣Ир╕бр╕лр╣Йр╕нр╕З'}
                                    </button>
                                    {editingRoom && (
                                        <button 
                                            type="button" 
                                            className="cancel-btn"
                                            onClick={() => {
                                                setEditingRoom(null);
                                                setRoomForm({ name: '', capacity: '', floor: '' });
                                            }}
                                        >
                                            тЭМ р╕вр╕Бр╣Ар╕ер╕┤р╕Б
                                        </button>
                                    )}
                                </div>
                            </form>
                        </div>

                        {/* Rooms List */}
                        <div className="list-section">
                            <h3>р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕лр╣Йр╕нр╕Зр╣Ар╕гр╕╡р╕вр╕Щ ({rooms.length} р╕лр╣Йр╕нр╕З)</h3>
                            <div className="data-table">
                                <table>
                                    <thead>
                                        <tr>
                                            <th>р╕Кр╕╖р╣Ир╕нр╕лр╣Йр╕нр╕З</th>
                                            <th>р╕Др╕зр╕▓р╕бр╕Ир╕╕</th>
                                            <th>р╕Кр╕▒р╣Йр╕Щ</th>
                                            <th>р╕Ир╕▒р╕Фр╕Бр╕▓р╕г</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {rooms.map(room => (
                                            <tr key={room.id}>
                                                <td>{room.name}</td>
                                                <td>{room.capacity} р╕Др╕Щ</td>
                                                <td>р╕Кр╕▒р╣Йр╕Щ {room.floor}</td>
                                                <td>
                                                    <button 
                                                        className="edit-btn"
                                                        onClick={() => editRoom(room)}
                                                    >
                                                        тЬПя╕П р╣Бр╕Бр╣Йр╣Др╕В
                                                    </button>
                                                    <button 
                                                        className="delete-btn"
                                                        onClick={() => deleteRoom(room.id)}
                                                    >
                                                        ЁЯЧСя╕П р╕ер╕Ъ
                                                    </button>
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                )}

                {/* Years Management Tab */}
                {activeTab === 'years' && (
                    <div className="tab-content">
                        <h2>ЁЯУЕ р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Ыр╕╡р╕Бр╕▓р╕гр╕ир╕╢р╕Бр╕йр╕▓</h2>
                        
                        {/* Year Form */}
                        <div className="form-section">
                            <h3>{editingYear ? 'р╣Бр╕Бр╣Йр╣Др╕Вр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ыр╕╡р╕Бр╕▓р╕гр╕ир╕╢р╕Бр╕йр╕▓' : 'р╣Ар╕Юр╕┤р╣Ир╕бр╕Ыр╕╡р╕Бр╕▓р╕гр╕ир╕╢р╕Бр╕йр╕▓р╣Гр╕лр╕бр╣И'}</h3>
                            <form onSubmit={handleYearSubmit} className="admin-form">
                                <div className="form-row">
                                    <input
                                        type="text"
                                        placeholder="р╕Кр╕╖р╣Ир╕нр╕Ыр╕╡р╕Бр╕▓р╕гр╕ир╕╢р╕Бр╕йр╕▓"
                                        value={yearForm.name}
                                        onChange={(e) => setYearForm({...yearForm, name: e.target.value})}
                                        required
                                    />
                                    <select
                                        value={yearForm.level}
                                        onChange={(e) => setYearForm({...yearForm, level: e.target.value})}
                                        required
                                    >
                                        <option value="">р╣Ар╕ер╕╖р╕нр╕Бр╕гр╕░р╕Фр╕▒р╕Ър╕Кр╕▒р╣Йр╕Щ</option>
                                        <option value="р╕бр╕▒р╕Шр╕вр╕бр╕ир╕╢р╕Бр╕йр╕▓р╕Ыр╕╡р╕Чр╕╡р╣И 1">р╕бр╕▒р╕Шр╕вр╕бр╕ир╕╢р╕Бр╕йр╕▓р╕Ыр╕╡р╕Чр╕╡р╣И 1</option>
                                        <option value="р╕бр╕▒р╕Шр╕вр╕бр╕ир╕╢р╕Бр╕йр╕▓р╕Ыр╕╡р╕Чр╕╡р╣И 2">р╕бр╕▒р╕Шр╕вр╕бр╕ир╕╢р╕Бр╕йр╕▓р╕Ыр╕╡р╕Чр╕╡р╣И 2</option>
                                        <option value="р╕бр╕▒р╕Шр╕вр╕бр╕ир╕╢р╕Бр╕йр╕▓р╕Ыр╕╡р╕Чр╕╡р╣И 3">р╕бр╕▒р╕Шр╕вр╕бр╕ир╕╢р╕Бр╕йр╕▓р╕Ыр╕╡р╕Чр╕╡р╣И 3</option>
                                        <option value="р╕бр╕▒р╕Шр╕вр╕бр╕ир╕╢р╕Бр╕йр╕▓р╕Ыр╕╡р╕Чр╕╡р╣И 4">р╕бр╕▒р╕Шр╕вр╕бр╕ир╕╢р╕Бр╕йр╕▓р╕Ыр╕╡р╕Чр╕╡р╣И 4</option>
                                        <option value="р╕бр╕▒р╕Шр╕вр╕бр╕ир╕╢р╕Бр╕йр╕▓р╕Ыр╕╡р╕Чр╕╡р╣И 5">р╕бр╕▒р╕Шр╕вр╕бр╕ир╕╢р╕Бр╕йр╕▓р╕Ыр╕╡р╕Чр╕╡р╣И 5</option>
                                        <option value="р╕бр╕▒р╕Шр╕вр╕бр╕ир╕╢р╕Бр╕йр╕▓р╕Ыр╕╡р╕Чр╕╡р╣И 6">р╕бр╕▒р╕Шр╕вр╕бр╕ир╕╢р╕Бр╕йр╕▓р╕Ыр╕╡р╕Чр╕╡р╣И 6</option>
                                    </select>
                                    <label className="checkbox-label">
                                        <input
                                            type="checkbox"
                                            checked={yearForm.active}
                                            onChange={(e) => setYearForm({...yearForm, active: e.target.checked})}
                                        />
                                        <span>р╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╕нр╕вр╕╣р╣И</span>
                                    </label>
                                </div>
                                <div className="form-actions">
                                    <button type="submit" className="submit-btn">
                                        {editingYear ? 'ЁЯТ╛ р╕нр╕▒р╕Юр╣Ар╕Фр╕Ч' : 'тЮХ р╣Ар╕Юр╕┤р╣Ир╕бр╕Ыр╕╡р╕Бр╕▓р╕гр╕ир╕╢р╕Бр╕йр╕▓'}
                                    </button>
                                    {editingYear && (
                                        <button 
                                            type="button" 
                                            className="cancel-btn"
                                            onClick={() => {
                                                setEditingYear(null);
                                                setYearForm({ name: '', level: '', active: false });
                                            }}
                                        >
                                            тЭМ р╕вр╕Бр╣Ар╕ер╕┤р╕Б
                                        </button>
                                    )}
                                </div>
                            </form>
                        </div>

                        {/* Years List */}
                        <div className="list-section">
                            <h3>р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Ыр╕╡р╕Бр╕▓р╕гр╕ир╕╢р╕Бр╕йр╕▓ ({years.length} р╕Ыр╕╡)</h3>
                            <div className="data-table">
                                <table>
                                    <thead>
                                        <tr>
                                            <th>р╕Кр╕╖р╣Ир╕нр╕Ыр╕╡р╕Бр╕▓р╕гр╕ир╕╢р╕Бр╕йр╕▓</th>
                                            <th>р╕гр╕░р╕Фр╕▒р╕Ър╕Кр╕▒р╣Йр╕Щ</th>
                                            <th>р╕кр╕Цр╕▓р╕Щр╕░</th>
                                            <th>р╕Ир╕▒р╕Фр╕Бр╕▓р╕г</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {years.map(year => (
                                            <tr key={year.id}>
                                                <td>{year.name}</td>
                                                <td>{year.level}</td>
                                                <td>
                                                    <span className={`status-badge ${year.active ? 'active' : 'inactive'}`}>
                                                        {year.active ? 'ЁЯЯв р╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ' : 'ЁЯФ┤ р╣Др╕бр╣Ир╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ'}
                                                    </span>
                                                </td>
                                                <td>
                                                    <button 
                                                        className="edit-btn"
                                                        onClick={() => editYear(year)}
                                                    >
                                                        тЬПя╕П р╣Бр╕Бр╣Йр╣Др╕В
                                                    </button>
                                                    <button 
                                                        className="delete-btn"
                                                        onClick={() => deleteYear(year.id)}
                                                    >
                                                        ЁЯЧСя╕П р╕ер╕Ъ
                                                    </button>
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
}
